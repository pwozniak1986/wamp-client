{"version":3,"sources":["services/wamp.ts","components/App.tsx","index.tsx"],"names":["ws","App","useState","address","setAddress","realm","setRealm","isConnecting","setIsConnecting","isConnected","setIsConnected","toast","useToast","h","w","gap","flexDirection","size","children","disabled","value","type","placeholder","onChange","event","target","direction","spacing","isLoading","loadingText","colorScheme","variant","onClick","disconnect","undefined","length","onConnection","Wampy","onConnect","onReconnectSuccess","onError","autoReconnect","reconnectInterval","maxRetries","initWAMP","success","title","description","status","duration","isClosable","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iJAGIA,E,6GCIW,SAASC,IACpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACMC,EAAQC,cAgDd,OACI,cAAC,IAAD,CAAQC,EAAE,OAAV,SACI,eAAC,IAAD,CAAQA,EAAE,QAAQC,EAAE,QAAQC,IAAI,OAAOC,cAAe,SAAtD,UACI,cAAC,IAAD,CAASC,KAAK,KAAd,8BACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAgBC,SAAS,UACzB,cAAC,IAAD,CAAOC,SAAUZ,GAAgBE,EAAaW,MAAOjB,EAASkB,KAAK,OAAOC,YAAY,eAAeC,SAAU,SAACC,GAAD,OAAWpB,EAAWoB,EAAMC,OAAOL,aAEtJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAOD,SAAUZ,GAAgBE,EAAaW,MAAOf,EAAOiB,YAAY,QAAQC,SAAU,SAACC,GAAD,OAAWlB,EAASkB,EAAMC,OAAOL,YAE/H,cAAC,IAAD,CAAOM,UAAU,MAAMC,QAAS,EAAhC,SACG,cAAC,IAAD,CACCC,UAAWrB,EACXsB,YAAapB,EAAc,gBAAkB,aAC7CqB,YAAarB,EAAc,MAAQ,OACnCsB,QAAQ,UACRC,QA/DE,WACd,GAAGvB,EAGC,ODMLT,IACCA,EAAGiC,aACHjC,OAAKkC,QCTDxB,GAAe,GAIG,IAAnBP,EAAQgC,OAUS,IAAjB9B,EAAM8B,QAUT3B,GAAgB,GDpCjB,SAAkBL,EAAiBE,EAAe+B,GAChDpC,IACDA,EAAK,IAAIqC,IAAMlC,EAAS,CACpBE,QACAiC,UAAW,kBAAMF,GAAa,IAC9BG,mBAAoB,kBAAMH,GAAa,IACvCI,QAAS,WACLJ,GAAa,IAEjBK,eAAe,EACfC,kBAAmB,IACnBC,WAAY,KC2BhBC,CAASzC,EAASE,GAAO,SAACwC,GACtBlC,EAAM,CACFmC,MAAOD,EACD,yBACA,uBACNE,YAAaF,EAAO,mCAA+B1C,EAA/B,wBAAsDE,QAAU6B,EACpFc,OAAQH,EAAU,UAAY,QAC9BI,SAAU,IACVC,YAAY,IAEhB1C,GAAgB,GACbqC,GACCnC,GAAe,OAvBnBC,EAAM,CACFmC,MAAO,oBACPE,OAAQ,QACRC,SAAU,IACVC,YAAY,IAdhBvC,EAAM,CACFmC,MAAO,sBACPE,OAAQ,QACRC,SAAU,IACVC,YAAY,KA8CT,SAOEzC,EAAc,aAAe,mB,YCxElD0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACpD,EAAD,QAGJqD,SAASC,eAAe,W","file":"static/js/main.570c2d26.chunk.js","sourcesContent":["import Wampy from 'wampy'\n\n\nlet ws: Wampy.Wampy | undefined\n\nexport function initWAMP(address: string, realm: string, onConnection: (success: boolean) => void) {\n    if (!ws) {\n        ws = new Wampy(address, {\n            realm,\n            onConnect: () => onConnection(true),\n            onReconnectSuccess: () => onConnection(true),\n            onError: () => {\n                onConnection(false)\n            },\n            autoReconnect: true,\n            reconnectInterval: 5000,\n            maxRetries: 0\n        });\n        \n    }\n\n}\n\nexport function disconnect(){\n    if(ws){\n        ws.disconnect()\n        ws = undefined\n    }\n}","import { Center, Heading, InputLeftAddon, Stack } from '@chakra-ui/react'\nimport { Input, InputGroup, Button, useToast } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { disconnect, initWAMP } from 'services/wamp'\n\n\n\nexport default function App() {\n    const [address, setAddress] = useState('')\n    const [realm, setRealm] = useState('')\n    const [isConnecting, setIsConnecting] = useState(false)\n    const [isConnected, setIsConnected] = useState(false)\n    const toast = useToast()\n\n    const onConnect = () => {\n        if(isConnected){\n            disconnect()\n            setIsConnected(false);\n            return\n        }\n\n        if(address.length === 0){\n            toast({\n                title: 'Enter valid address',\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            })\n            return\n        }\n\n        if(realm.length === 0){\n            toast({\n                title: 'Enter valid realm',\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            })\n            return\n        }\n\n        setIsConnecting(true)\n        \n        initWAMP(address, realm, (success) => {\n            toast({\n                title: success \n                    ? 'Connection established' \n                    : 'An error has occured',\n                description: success ? `Successfuly connected to ${address} using realm ${realm}` : undefined,\n                status: success ? 'success' : 'error',\n                duration: 9000,\n                isClosable: true,\n            })\n            setIsConnecting(false)\n            if(success){\n                setIsConnected(true)\n            }\n        })\n    }\n\n    return (\n        <Center h='100%'>\n            <Center h='160px' w='600px' gap='12px' flexDirection={'column'}>\n                <Heading size='md'>WAMP CLIENT TEST</Heading>\n                <InputGroup>\n                    <InputLeftAddon children='ws://' />\n                    <Input disabled={isConnecting || isConnected} value={address} type='text' placeholder='address:port' onChange={(event) => setAddress(event.target.value)}/>\n                </InputGroup>\n                <InputGroup>\n                    <Input disabled={isConnecting || isConnected} value={realm} placeholder='realm' onChange={(event) => setRealm(event.target.value)}/>\n                </InputGroup>\n                <Stack direction='row' spacing={4}>\n                   <Button\n                    isLoading={isConnecting}\n                    loadingText={isConnected ? 'Disconnecting' : 'Connecting'}\n                    colorScheme={isConnected ? 'red' : 'teal'}\n                    variant='outline'\n                    onClick={onConnect}\n                >\n                    {isConnected ? 'Disconnect' : 'Connect'}\n                </Button> \n                </Stack>\n            </Center>\n        </Center>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './components/App';\nimport { ChakraProvider } from '@chakra-ui/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}